// "use server";
import { JWT } from "google-auth-library";
import { google } from 'googleapis';
import stream from 'stream';
import path from "path";
import { promises as fs, watch } from "fs";
import { AST, parseFileContents } from "./common";
// import { updateCode } from "./routes";

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY?.split(String.raw`\n`).join('\n'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive'],
});

const sheets = google.sheets({version: 'v4', auth: serviceAccountAuth});
const drive = google.drive({version: 'v3', auth: serviceAccountAuth});

//export sheets
export { sheets, drive };
export async function getRows() {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: '1mWUGI2zzvp_bSTw6kE5K68mHg2SzoRiT9zgaMc7qE3I',
    range: 'Deck!A1:V',
  });
  const rows = res.data.values;
  if (!rows || rows.length === 0) {
    console.log('No data found.');
    return null;
  }
  // console.log('Name, Type:');
  // rows.forEach((row: any[]) => {
  //   // Print columns A and E, which correspond to indices 0 and 4.
  //   console.log(`${row[0]}, ${row[2]}`);
  // });
  return rows;
}
export async function uploadDeck(dataUrl: string, deckName: string) {
  /*
    drive.files.update({
      fileId: file.id,
      resource: fileMetadata,
      media: media
    }
  */
  const res = await drive.files.create({
    requestBody: {
      name: deckName+'.png',
      mimeType: 'image/png',
      parents: ['15GudQptM8im7IC2D-oKIrKFGRO2L_LzH']
    },
    media: {
      mimeType: 'image/png',
      body: new stream.PassThrough().end(Buffer.from(dataUrl.split(",")[1], 'base64'))
    }
  }).catch((err) => {
    console.log(err);
  });
  if(res) {
    console.log(res.data);
    return res.data.id;
  }
  return null;
}
export async function parseFile(filePath: string) {
  // get path
  const fullPath = path.resolve(filePath);
  const file = await fs.readFile(fullPath, 'utf8');
  
  return parseFileContents(file);
}
export async function saveDeck(dataUrl: string, deckName: string) {
  // save to local file
  const fileName = deckName+'.png';
  const filePath = path.resolve('public', fileName);
  await fs.writeFile(filePath, Buffer.from(dataUrl.split(",")[1], 'base64'));
}


// watch(path.resolve('Deck.txt'), (eventType, filename) => {
//   console.log(eventType, filename);
//   if(eventType === 'change' && filename) {
//     parseFile(filename).
//     then((ast) => {
//       updateCode(ast);
//     });
//   }
// });

export async function waitForCode(): Promise<AST> {
  return new Promise((resolve) => {
    watch(path.resolve('Deck.txt'), (eventType, filename) => {
      // console.log(eventType, filename);
      if(eventType === 'change' && filename) {
        parseFile(filename).
        then((ast) => {
          resolve(ast);
        });
      }
    });
  });
}

/*const resImages = await drive.files.list({
  q: "'1fqdIBUvK_lGFDLhtKC_nKLbTfjbXsIJH' in parents"
});
if(resImages.data.files) {
  const images: {[key: string]: string} = {};
  for(const folder of resImages.data.files) {
    const resFolder = await drive.files.list({
      q: `'${folder.id}' in parents`,
      pageSize: 1000
    });
    if(resFolder.data.files) {
      console.log(folder.name, resFolder.data.files.length);
      for(const file of resFolder.data.files) {
        if(file.name && file.id) {
          images[file.name] = file.id;
        }
      }
    }
  }
  // get image paths from sheets
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: '1mWUGI2zzvp_bSTw6kE5K68mHg2SzoRiT9zgaMc7qE3I',
    range: 'Deck!B2:B',
  });
  const rows = res.data.values;
  if(rows) {
    let result = "";
    for(const row of rows) {
      const cell = row[0];
      if(cell && cell.startsWith('C:')) {
        const imagePath = cell;
        const lastSlash = imagePath.lastIndexOf('\\');
        const imageName = imagePath.slice(lastSlash+1);
        const imageId = images[imageName];
        // console.log(imageName, imageId);
        if(imageId) {
          result += `https://drive.google.com/thumbnail?id=${imageId}&sz=w710\n`;
        } else {
          // console.error('Image not found:', imageName);
          result += '\n';
        }
      } else {
        result += '\n';
      }
    }
    await fs.writeFile(path.resolve('result.txt'), result);
  }
}*/